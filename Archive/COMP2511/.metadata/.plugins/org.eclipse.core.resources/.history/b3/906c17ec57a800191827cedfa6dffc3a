package unsw.dungeon;

import java.util.ArrayList;

public class Inventory {
	
	private ArrayList<Item> items;
	
	public Inventory() {
		ArrayList<Item> items = new ArrayList<Item>();
	}
	
	//precondition: item is of correct type
	//checks if item if key, if it is key, checks if there is already another key in the inventory
	//if so, does not add and returns false
	//returns true if item successfully added, false if not
	public boolean addToInventory(Item item) {
		Key curr = new Key();
		if (item.getClass() == curr.getClass()) {
			for (Item inventory_item : this.getItems()) {
				if (inventory_item.getClass() == curr.getClass()) return false; 
			}
		}
		
		return this.getItems().add(item);
	}
	
	public void removeFromInventory(Item item) {
		this.getItems().remove(item);
	}
	
	//looks through all items in list, if they are of type key and have the same id, returns true
	//otherwise returns false
	public boolean findCorrespondingKey(int ID) {
		Key curr = new Key();
		if (this.getItems() != null) { // needs fixing - why is this null?
			for (Item item : this.getItems()) {
				if (item.getClass() == curr.getClass()) {
					Key key_item = (Key) item;
					if (ID == key_item.getId()) return true;
				}
			}
		}
		
		return false;
	}

	public ArrayList<Item> getItems() {
		return items;
	}
	
	public boolean haveItem(int itemCode) {
		if (this.getItems() != null) { // maybe have method like is inventory empty?
			for (Item item : this.getItems()) {
				if (item.getItemCode() == itemCode) {
					return true;
				}
			}
		return false;
		} else {
			return false;
		}
	}
	
	public Item findItem(int itemCode) {
		if (this.getItems() != null) {
			for (Item item: this.getItems()) {
				if (item.getItemCode() == itemCode) {
					return item;
				}
			}
		return null;
		}
	}
	
}
