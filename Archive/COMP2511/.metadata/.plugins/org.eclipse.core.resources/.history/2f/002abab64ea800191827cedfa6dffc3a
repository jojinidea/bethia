package unsw.dungeon;

import java.util.ArrayList;

public class Boulder extends Item {
	
	public Boulder(int x, int y) {
		super(x, y);
	    setObstacleBehaviour(new BoulderObstacle(this));
	    setUseBehaviour(new UseBoulder(this)); 
	    setCollectBehaviour(new CollectNonCollectible());
	}
	    
	@Override
	public String toString() {
		String debugString = "[Boulder: x " + this.getX() + " y: " + this.getY() + "]";
	    return debugString;
	}
	
	// determines if boulder is moveable or not given a list of entities next to the boulder in the attempted direction of movement
	public boolean moveable(Direction direction, Dungeon dungeon) {
		// if any of the entities are unopened doors (isObstacle), walls (isObstacle), boulders, return false, not moveable
		// otherwise return true
		// if entitiy == wall 
		ArrayList<Entity> adjacentEntities = dungeon.findEntityNextTo(this, direction); // returns list of entities in square immediately adjacent to boulder in the direction specified
		System.out.println("ADJACENT ENTITIES ARE " + adjacentEntities);
		for (Entity e : adjacentEntities) {
			if (e.isObstacle(dungeon, e) == true) {
				return false;
			}
		}
		return true;
	}

	public void move(Direction d, Dungeon dungeon) {
		// move the boulder one unit in the direction specified if it is able to be moved
		if (this.moveable(d, dungeon) == true) {
			System.out.println("ATTEMPTING TO MOVE BOULDER");
			System.out.println("DIRECTION IS" + d);
			this.updateCoord(d);
		}
	}
	
	// TODO: possibly abstract this out into an interface??
	public void updateCoord(Direction d) {
		switch(d) {
		case UP: 
			y().set(this.getY()-1);
			break;
		case DOWN: 
			y().set(this.getY()+1);
			break;
		case LEFT:
			x().set(this.getX()-1);
			break;
		case RIGHT:
			x().set(this.getX()+1);
			break;
		}
			
	}
}
