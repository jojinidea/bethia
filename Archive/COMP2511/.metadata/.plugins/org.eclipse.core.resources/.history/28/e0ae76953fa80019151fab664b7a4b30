package unsw.dungeon;

public class ItemActiveState implements ItemState {
	
	// active state - item is active, able to be used
	// once an item becomes active (from the inventory state), they are removed from the inventory, bombs also need to be dropped down on the square the player is on (TODO)
	// active items are not able to be activated or collected
	// active items can be used
	// once an item has been fully used, it transitions to the used state
	
	private Item item;
	
	public ItemActiveState(Item item) {
		this.item = item;
	}

	
	
	@Override
	public void use(Player player, Dungeon dungeon) {
		if (this.getItem().isUseable()) { // if item is able to be used, use it
			this.getItem().use(dungeon, player);
		} else { // if item is used up, update state
			// update state to used state & remove from board if applicable (like bombs)
		}
	}

	@Override
	public void activate(Player player, Dungeon dungeon) {
		//  Activated items cannot be further activated
		
	}

	@Override
	public void collect(Dungeon dungeon, Player player) {
		// Activated items are unable to be collected by the player
		
	}



	public Item getItem() {
		return item;
	}



	public void setItem(Item item) {
		this.item = item;
	}
	
	
	

}
